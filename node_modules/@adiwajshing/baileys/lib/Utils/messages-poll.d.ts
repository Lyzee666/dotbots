/**
 * Create crypto instance.
 * @description If your nodejs crypto module doesn't have WebCrypto, you must install `@peculiar/webcrypto` first
 * @return {Crypto}
 */
export declare const getCrypto: () => Crypto;
/**
     * Compare the SHA-256 hashes of the poll options from the update to find the original choices
     * @param options Options from the poll creation message
     * @param pollOptionHashes hash from `decryptPollMessageRaw()`
     * @return {Promise<string[]>} the original option, can be empty when none are currently selected
     */
export declare const comparePollMessage: (options: string[], pollOptionHashes: string[]) => Promise<string[]>;
/**
     * Decode the message from `decryptPollMessageInternal()`
     * @param decryptedMessage the message from `decrpytPollMessageInternal()`
     * @return {string}
     */
export declare const decodePollMessage: (decryptedMessage: Uint8Array) => string;
/**
     * raw function to decrypt a poll message update
     * @param encPayload Encryption payload/contents want to decrypt, you can get it from `pollUpdateMessage.vote.encPayload`
     * @param encIv Encryption iv (used to decrypt the payload), you can get it from `pollUpdateMessage.vote.encIv`
     * @param encKey Encryption key (used to decrypt the payload), you need to store/save the encKey. If you want get the encKey, you could get it from `Message.messageContextInfo.messageSecret`, only available on poll creation message.
     * @param pollMsgSender sender The sender's jid of poll message, you can use `pollUpdateMessage.pollCreationMessageKey.participant` (Note: you need to normalize the jid first)
     * @param pollMsgId The ID of poll message, you can use `pollUpdateMessage.pollMessageCreationKey.id`
     * @param voteMsgSender The poll voter's jid, you can use `Message.key.remoteJid`, `Message.key.participant`, or `Message.participant`. (Note: you need to normalize the jid first)
     * @return {Promise<string[]>} The option or empty array if something went wrong OR everything was unticked
     */
export declare const decryptPollMessageRaw: (encKey: Uint8Array, encPayload: Uint8Array, encIv: Uint8Array, pollMsgSender: string, pollMsgId: string, voteMsgSender: string) => Promise<string[]>;
